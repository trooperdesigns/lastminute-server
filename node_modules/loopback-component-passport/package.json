{
  "name": "loopback-component-passport",
  "description": "LoopBack passport integration to support third party logins and account linking",
  "keywords": [
    "StrongLoop",
    "LoopBack",
    "social",
    "login",
    "security"
  ],
  "homepage": "https://github.com/strongloop/loopback-component-passport",
  "version": "1.0.4",
  "engines": {
    "node": ">=0.10.0"
  },
  "maintainers": [
    {
      "name": "Raymond Feng",
      "email": "raymond@strongloop.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/strongloop/loopback-component-passport/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/strongloop/loopback-component-passport.git"
  },
  "dependencies": {
    "passport": "~0.2.0",
    "underscore": "^1.6.0"
  },
  "peerDependencies": {
    "loopback": "2.x || 1.x >=1.8.0"
  },
  "devDependencies": {
    "loopback": "1.x >=1.8.0",
    "mocha": "~1.20.1"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha -R spec --timeout 10000 test/*.js"
  },
  "main": "./lib/index.js",
  "license": {
    "name": "Dual Artistic-2.0/StrongLoop",
    "url": "https://github.com/strongloop/loopback-component-passport/blob/master/LICENSE"
  },
  "readme": "# LoopBack Passport Component\n\n**NOTE: The loopback-component-passport module supersedes [loopback-passport](https://www.npmjs.org/package/loopback-passport). Please update your package.json accordingly.**\n\nThe module provides integration between [LoopBack](http://loopback.io) and \n[Passport](http://passportjs.org) to support third party login and account \nlinking for LoopBack applications.\n\n# Use cases\n\n## Third party login\n\nSocial login becomes popular these days as our users don’t want to deal with so \nmany identities. It would be nice to allow the use of a third party provider \nsuch as Facebook, Google, Twitter, or Github to log into LoopBack. The login \nprofiles will be tracked and associated with corresponding LoopBack users. \n\n## Linked accounts\n\nIn LoopBack, most APIs will be built using models that are backed by data \nsources, which in turn uses connectors to interact with other systems or cloud \nservices. Some of the backend systems require user-specific credentials to \naccess the protected resources. For example, an e-commerce engine requires the \nuser credential to see the order history. It’s also true to get pictures from \none or more facebook accounts. One solution to this requirement is to link or \npre-authorize a LoopBack user to other accounts.\n\n# Key components\n\n![Key Components](ids_and_credentials.png)\n\n## UserIdentity model\n\nUserIdentity model keeps track of 3rd party login profiles. Each user identity\nis uniquely identified by provider and externalId. UserIdentity model comes with\na 'belongsTo' relation to the User model.\n\nProperties\n\n- {String} provider: The auth provider name, such as facebook, google, twitter, linkedin\n- {String} authScheme: The auth scheme, such as oAuth, oAuth 2.0, OpenID, OpenID Connect\n- {String} externalId: The provider specific user id\n- {Object} profile: The user profile, see http://passportjs.org/guide/profile\n- {Object} credentials\n  - oAuth: token, tokenSecret\n  - oAuth 2.0: accessToken, refreshToken\n  - OpenID: openId\n  - OpenID Connect: accessToken, refreshToken, profile\n- {*} userId: The LoopBack user id\n- {Date} created: The created date\n- {Date} modified: The last modified date\n\n## UserCredential model\n\nUserCredential has the same set of properties as UserIdentity. It's used to \nstore the credentials from a third party authentication/authorization provider\nto represent the permissions/authorizations from a user from the third party \nsystem. \n\n## ApplicationCredential model\n\nInteracting with third party systems often require some client application level\ncredentials. For example, you will need oAuth 2.0 client id and client secret to \ncall facebook APIs. Such credentials can be supplied from a configuration file \nto your server globally. But if your server accepts API requests from multiple\nclient applications, each client application should have its own credentials. To\nsupport the multi tenancy, this module provides the ApplicationCredential model\nto store credentials associated with a client application.\n\nProperties\n\n- {String} provider: The auth provider name, such as facebook, google, twitter, linkedin\n- {String} authScheme: The auth scheme, such as oAuth, oAuth 2.0, OpenID, OpenID Connect\n- {Object} credentials: The provider specific credentials\n  - openId: {returnURL: String, realm: String}\n  - oAuth2: {clientID: String, clientSecret: String, callbackURL: String}\n  - oAuth: {consumerKey: String, consumerSecret: String, callbackURL: String}\n- {Date} created: The created date\n- {Date} modified: The last modified date\n\nApplicationCredential model comes with a 'belongsTo' relation to the Application \nmodel.\n\n## PassportConfigurator\n\nPassportConfigurator is the bridge between LoopBack and Passport. \n\n- set up models with LoopBack\n- initialize passport\n- create Passport strategies from provider configurations\n- set up routes for auth and callback \n\n# Flows\n\n## Third party login flow\n\nThe following steps use Facebook oAuth 2.0 login as an example.\n\n1. A visitor requests to log in using Facebook (or other providers), typically \nby clicking on a link or button backed by LoopBack to kick off oAuth 2.0 \nauthorization code flow\n2. LoopBack redirects the browser to Facebook's authorization endpoint so that\nthe user can log into Facebook and grant permissions to LoopBack\n3. Facebook redirects the browser to a callback URL hosted by LoopBack \nwith the oAuth 2.0 authorization code\n4. LoopBack makes a request to the Facebook token endpoint to get an access \ntoken using the authorization code \n5. LoopBack uses the access token to retrieve the user's Facebook profile\n6. LoopBack searches the UserIdentity model by (provider, externalId) to see \nthere is an existing LoopBack user for the given Facebook id\n7. If yes, set the LoopBack user to the current context\n8. If not, create a LoopBack user from the profile and create a corresponding \nrecord in UserIdentity to track the 3rd party login. Set the newly created user \nto the current context.\n\n## Third party account linking flow\n\nThe following steps use Facebook oAuth 2.0 login as an example.\n\n1. The user log into LoopBack first directly or through third party login\n2. The user clicks on a link or button by LoopBack to kick off oAuth 2.0 \nauthorization code flow so that the user can grant permissions to LoopBack\n3. Perform the same steps 2-5 as third party login \n4. LoopBack searches the UserCredential model by (provider, externalId) to see \n   there is an existing LoopBack user for the given Facebook id\n5. Link the Facebook account to the current user by creating a record in the\nUserCredential model to store the Facebook credentials, such as access token\n6. Now the LoopBack user wants to get a list of pictures from the linked Facebook\naccount(s). LoopBack can look up the Facebook credentials associated with the \ncurrent user and use them to call Facebook APIs to retrieve the pictures. \n\n# Use the module with a LoopBack application\n\nA demo application is built with this module to showcase how to use the APIs \nwith a LoopBack application. The code is available at:\n\n[https://github.com/strongloop-community/loopback-example-passport](https://github.com/strongloop-community/loopback-example-passport)\n\n## Configure third party providers\n\nThe following example shows two providers: facebook-login for login with \nfacebook and google-link for linking your google accounts with the current \nLoopBack user.\n\n```json\n{\n  \"facebook-login\": {\n    \"provider\": \"facebook\",\n    \"module\": \"passport-facebook\",\n    \"clientID\": \"{facebook-client-id-1}\",\n    \"clientSecret\": \"{facebook-client-secret-1}\",\n    \"callbackURL\": \"http://localhost:3000/auth/facebook/callback\",\n    \"authPath\": \"/auth/facebook\",\n    \"callbackPath\": \"/auth/facebook/callback\",\n    \"successRedirect\": \"/auth/account\",\n    \"scope\": [\"email\"]\n  },\n  ...\n  \"google-link\": {\n    \"provider\": \"google\",\n    \"module\": \"passport-google-oauth\",\n    \"strategy\": \"OAuth2Strategy\",\n    \"clientID\": \"{google-client-id-2}\",\n    \"clientSecret\": \"{google-client-secret-2}\",\n    \"callbackURL\": \"http://localhost:3000/link/google/callback\",\n    \"authPath\": \"/link/google\",\n    \"callbackPath\": \"/link/google/callback\",\n    \"successRedirect\": \"/link/account\",\n    \"scope\": [\"email\", \"profile\"],\n    \"link\": true\n  }\n}\n```\n\n**NOTE**\n\nYou'll need to register with facebook and google to get your own client id and \nclient secret.\n\n- Facebook: https://developers.facebook.com/apps\n- Google: https://console.developers.google.com/project\n\n## Add code snippets to app.js\n\n```js\nvar loopback = require('loopback');\nvar path = require('path');\nvar app = module.exports = loopback();\n\n// Create an instance of PassportConfigurator with the app instance\nvar PassportConfigurator = require('loopback-component-passport').PassportConfigurator;\nvar passportConfigurator = new PassportConfigurator(app);\n\napp.boot(__dirname);\n\n...\n\n// Enable http session\napp.use(loopback.session({ secret: 'keyboard cat' }));\n\n// Load the provider configurations\nvar config = {};\ntry {\n  config = require('./providers.json');\n} catch(err) {\n  console.error('Please configure your passport strategy in `providers.json`.');\n  console.error('Copy `providers.json.template` to `providers.json` and replace the clientID/clientSecret values with your own.');\n  process.exit(1);\n}\n\n// Initialize passport\npassportConfigurator.init();\n\n// Set up related models\npassportConfigurator.setupModels({\n  userModel: app.models.user,\n  userIdentityModel: app.models.userIdentity,\n  userCredentialModel: app.models.userCredential\n});\n\n// Configure passport strategies for third party auth providers\nfor(var s in config) {\n  var c = config[s];\n  c.session = c.session !== false;\n  passportConfigurator.configureProvider(s, c);\n}\n```",
  "readmeFilename": "README.md",
  "_id": "loopback-component-passport@1.0.4",
  "dist": {
    "shasum": "1aadbb35da43c3096a03ab80783d2e97bb1e5ca7"
  },
  "_from": "loopback-component-passport@~1.0.3",
  "_resolved": "https://registry.npmjs.org/loopback-component-passport/-/loopback-component-passport-1.0.4.tgz"
}
